using NUnit.Framework.Internal;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;

using System;
using System.Threading;

namespace PromotionPlanTests
{
    public class WebElement
    {
        private IWebDriver _driver;
        private IWebElement _element;

        public WebElement(IWebDriver driver)
        {
            _driver = driver;
        }
        public void SendKeys(string input)
        {
            _element.Clear();
            _element.SendKeys(input);
        }
        public void Click()
        {
            _element.Click();
        }
        public void Select()
        {
            SelectElement select = new SelectElement(_element);

        }
        public WebElement FindByXpath(string xpath)
        {
            int timeout = 10;
            bool result = false;
            for (int i = 0; i < timeout; i+=1)
            {
                if (result == false)
                {
                    Thread.Sleep(1000);
                    IWebElement element = _driver.FindElement(By.XPath(xpath));
                    result = (element.Enabled);
                }
                else
                {
                    _element = _driver.FindElement(By.XPath(xpath));
                    return this;
                }
            }
            return this;
        }
        public WebElement FindByXpath(string xpath, string variable)
        {
            int timeout = 10;
            bool result = false;
            for (int i = 0; i < timeout; i += 1)
            {
                if (result == false)
                {
                    Thread.Sleep(1000);
                    IWebElement element = _driver.FindElement(By.XPath(xpath));
                    result = (element.Enabled);
                }
                else
                {
                    _element = _driver.FindElement(By.XPath(xpath));
                    return this;
                }
            }
            return this;
        }
        public string GetAttribute(string value)
        {
            return _element.GetAttribute(value);
        }
        public bool IsNotDisplayed()
        {
            if (_element.Displayed == false)
            {
                return true;
            }
            return false;
        }
        public void MoveToAndClick()
        {
            Actions actions = new Actions(_driver);
            actions.MoveToElement(_element).Click().Perform();
        }
        public void DoubleClick()
        {
            Actions actions = new Actions(_driver);
            actions.MoveToElement(_element).DoubleClick().Perform();
        }
        public string ShowText()
        {
            return _element.Text;
        }
        public void WaitTillPopupMaskDissapear()
        {
            var wait = new WebDriverWait(_driver, TimeSpan.FromSeconds(30));
            wait.Until(SeleniumExtras.WaitHelpers.ExpectedConditions.InvisibilityOfElementLocated(By.Id("modalPopupMask")));
        }
        public void WaitTillAlertDissapear()
        {
            var wait = new WebDriverWait(_driver, TimeSpan.FromSeconds(30));
            wait.Until(SeleniumExtras.WaitHelpers.ExpectedConditions.InvisibilityOfElementLocated(By.Id("alertMsgOkBtn")));
        }
    }
}
